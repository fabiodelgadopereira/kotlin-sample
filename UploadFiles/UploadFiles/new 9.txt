CSVRecord := RECORD
   STRING20 AN_LETIVO;
   STRING20 CD_UNIDADE_EDUCACAO;
   STRING20 NOME_DISTRITO;
END;
file3 := DATASET('~thor::microdados_2018.csv',
				 CSVrecord,
				 CSV(HEADING(1),
					 SEPARATOR(['|']),
					 TERMINATOR(['\n','\r\n','\n\r'])));


GroupedSet := TABLE(file3,{NOME_DISTRITO,COUNT(GROUP)},NOME_DISTRITO);
OUTPUT(GroupedSet)


##########################################################
CSVRecord := RECORD
   STRING20 AN_LETIVO;
   STRING20 CD_UNIDADE_EDUCACAO;
   STRING20 NOME_DISTRITO;
	 STRING20 CD_SETOR;
	 STRING20 TIPO_ESCOLA;
	 STRING20 NOME_ESCOLA;
END;
file3 := DATASET('~thor::microdados_2018.csv',
				 CSVrecord,
				 CSV(HEADING(1),
					 SEPARATOR(['|']),
					 TERMINATOR(['\n','\r\n','\n\r'])));

GroupedSet := TABLE(file3,{NOME_DISTRITO,INTEGER1  s := COUNT(GROUP)},CD_UNIDADE_EDUCACAO);
MySortedFile := SORTED(GroupedSet,s);
OUTPUT(GroupedSet)


##########################################################
CSVRecord := RECORD
   STRING20 AN_LETIVO;
   STRING20 CD_UNIDADE_EDUCACAO;
   STRING20 NOME_DISTRITO;
	 STRING20 CD_SETOR;
	 STRING20 TIPO_ESCOLA;
	 STRING20 NOME_ESCOLA;
END;
file3 := DATASET('~thor::microdados_2018.csv',
				 CSVrecord,
				 CSV(HEADING(1),
					 SEPARATOR(['|']),
					 TERMINATOR(['\n','\r\n','\n\r'])));

file4 :=  TABLE(file3,{NOME_DISTRITO,CD_UNIDADE_EDUCACAO},NOME_DISTRITO,CD_UNIDADE_EDUCACAO);

MySortedFile := SORT(file4,file4.NOME_DISTRITO);
OUTPUT(MySortedFile)
##########################################################

CSVRecord := RECORD
   STRING20 AN_LETIVO;
   STRING20 CD_UNIDADE_EDUCACAO;
   STRING20 NOME_DISTRITO;
	 STRING20 CD_SETOR;
	 STRING20 TIPO_ESCOLA;
	 STRING20 NOME_ESCOLA;
END;
file3 := DATASET('~thor::microdados_2018.csv',
				 CSVrecord,
				 CSV(HEADING(1),
					 SEPARATOR(['|']),
					 TERMINATOR(['\n','\r\n','\n\r'])));

file4 :=  TABLE(file3,{NOME_DISTRITO,CD_UNIDADE_EDUCACAO},NOME_DISTRITO,CD_UNIDADE_EDUCACAO);
file5 :=  TABLE(file4,{NOME_DISTRITO,INTEGER1  s := COUNT(NOME_DISTRITO)});
file6 :=  TABLE(file5,{NOME_DISTRITO,COUNT(GROUP)},NOME_DISTRITO,s);
MySortedFile := SORT(file6,file6.NOME_DISTRITO);
OUTPUT(MySortedFile)
##########################################################

CSVRecord := RECORD
   STRING20 AN_LETIVO;
   STRING20 CD_UNIDADE_EDUCACAO;
   STRING20 NOME_DISTRITO;
	 STRING20 CD_SETOR;
	 STRING20 TIPO_ESCOLA;
	 STRING20 NOME_ESCOLA;
END;
file3 := DATASET('~thor::microdados_2018.csv',
				 CSVrecord,
				 CSV(HEADING(1),
					 SEPARATOR(['|']),
					 TERMINATOR(['\n','\r\n','\n\r'])));

file4 :=  TABLE(file3,{NOME_DISTRITO,CD_UNIDADE_EDUCACAO},NOME_DISTRITO,CD_UNIDADE_EDUCACAO);
file5 :=  TABLE(file4,{NOME_DISTRITO,INTEGER2  s := COUNT(NOME_DISTRITO)});
file6 :=  TABLE(file5,{NOME_DISTRITO,INTEGER2  contador := COUNT(GROUP)},NOME_DISTRITO,s);
MySortedFile := SORT(file6,file6.contador);
OUTPUT(MySortedFile)


##########################################################


CSVRecord := RECORD
   STRING20 AN_LETIVO;
   STRING20 CD_UNIDADE_EDUCACAO;
   STRING20 NOME_DISTRITO;
	 STRING20 CD_SETOR;
	 STRING20 TIPO_ESCOLA;
	 STRING20 NOME_ESCOLA;
END;
file3 := DATASET('~thor::microdados_2018.csv',
				 CSVrecord,
				 CSV(HEADING(1),
					 SEPARATOR(['|']),
					 TERMINATOR(['\n','\r\n','\n\r'])));

file4 :=  TABLE(file3,{NOME_DISTRITO,CD_UNIDADE_EDUCACAO},NOME_DISTRITO,CD_UNIDADE_EDUCACAO);
file5 :=  TABLE(file4,{NOME_DISTRITO,INTEGER2  s := COUNT(NOME_DISTRITO)});
file6 :=  TABLE(file5,{NOME_DISTRITO,INTEGER2  contador := COUNT(GROUP)},NOME_DISTRITO,s);
MySortedFile := SORT(file6,file6.contador);

MaxVal := MAX(MySortedFile,MySortedFile.contador);

Hanks := MySortedFile(MySortedFile.contador = 2);

OUTPUT(Hanks)



=============================================================

CSVRecord := RECORD
   STRING20 AN_LETIVO;
   STRING20 CD_UNIDADE_EDUCACAO;
   STRING20 NOME_DISTRITO;
	 STRING20 CD_SETOR;
	 STRING20 TIPO_ESCOLA;
	 STRING20 NOME_ESCOLA;
END;
file3 := DATASET('~thor::microdados_2018.csv',
				 CSVrecord,
				 CSV(HEADING(1),
					 SEPARATOR(['|']),
					 TERMINATOR(['\n','\r\n','\n\r'])));

file4 :=  TABLE(file3,{NOME_DISTRITO,CD_UNIDADE_EDUCACAO},NOME_DISTRITO,CD_UNIDADE_EDUCACAO);
file5 :=  TABLE(file4,{NOME_DISTRITO,INTEGER2  s := COUNT(NOME_DISTRITO)});
file6 :=  TABLE(file5,{NOME_DISTRITO,INTEGER2  contador := COUNT(GROUP)},NOME_DISTRITO,s);

MaxVal := MAX(file6,file6.contador);
MinVal := MIN(file6,file6.contador);

DISTRICTS_WITH_LEAST_SCHOOLS  := file6(file6.contador = MinVal);
DISTRICTS_WITH_MOST_SCHOOLS   := file6(file6.contador = MaxVal);

OUTPUT(DISTRICTS_WITH_LEAST_SCHOOLS);
OUTPUT(DISTRICTS_WITH_MOST_SCHOOLS)

==================================================

CSVRecord := RECORD
   STRING20 AN_LETIVO;
   STRING20 CD_UNIDADE_EDUCACAO;
   STRING20 NOME_DISTRITO;
	 STRING20 CD_SETOR;
	 STRING20 TIPO_ESCOLA;
	 STRING20 NOME_ESCOLA;
   STRING20 DRE;
   INTEGER2 CD_INEP_ESCOLA;
   STRING20 SITUACAO_ESCOLA;
   STRING20 CD_TURMA;
   INTEGER2 CD_TURNO;
   STRING20 DESC_TURNO;
   INTEGER2 CD_SERIE;
   STRING20 DESC_SERIE;
   STRING20 MODALIDADE;
   STRING20 MODALIDADE_SEGMENTO;
   STRING20 TURMA_ESCOL;
   STRING20 NOME_TURMA;
   STRING20 HORA_IN_TURMA;
   STRING20 HORA_FIM_TURMA;
   STRING20 DESC_PERIODICIDADE_TURMA;
   INTEGER1 CD_ETAPA_ENSINO;
   STRING20 DESC_ETAPA_ENSINO;
   INTEGER1 CD_CICLO_ENSINO;
   STRING20 DESC_CICLO_ENSINO;
   INTEGER1 CD_TIPO_TURMA;
   STRING20 DESC_TIPO_TURMA;
   INTEGER1 CD_TIPO_PROGRAMA;
   STRING20 DESC_TIPO_PROGRAMA;
   INTEGER2 DUR_DIA_TURMA;
   INTEGER2 DUR_DIA_HORA;
   INTEGER2 DUR_DIA_MIN;
   INTEGER2 DUR_SEMAN_TURMA;
   INTEGER2 DUR_SEM_HORA;
   INTEGER2 DUR_SEM_MIN;
   INTEGER2 QTD_DIAS_SEMAN_TURMA;
   INTEGER2 X_SEMANA;
   INTEGER1 SEG;
   INTEGER1 TER;
   INTEGER1 QUA;
   INTEGER1 QUI;
   INTEGER1 SEX;
   INTEGER1 SAB;
   INTEGER1 DOM;
   INTEGER2 CD_ALUNO_SME;
   INTEGER2 ANO_NASC_ALUNO;
   INTEGER2 MES_NASC_ALUNO;
   INTEGER2 IDADE_ALUNO_ANO_CIVIL;
   INTEGER2 IDADE_ALUNO_3103;
   STRING2 CD_SEXO;
   INTEGER1 CD_RACA_COR;
   STRING20 DESC_RACA_COR;
   INTEGER2 CD_PAIS_NASC;
   STRING20 DESC_PAIS_NASC;
   INTEGER2 CD_MUN_NASC;
   STRING20 DESC_MUN_NASC;
   STRING20 DESC_UF_NASC;
   INTEGER1 NEE_ALT_HAB;
   INTEGER1 DEF__AUTISMO;
   INTEGER1 DEF__SURDEZ_LEVE;
   INTEGER1 DEF__SURDEZ_SEV;
   INTEGER1 DEF__INTELECT;
   INTEGER1 DEF__MULTIPLA;
   INTEGER1 DEF__CEGUEIRA;
   INTEGER1 DEF__BAIXA_VISAO;
   INTEGER1 DEF__SURDO_CEG;
   INTEGER1 DEF__TRANST_DES_INF;
   INTEGER1 DEF__SINDR_ASPER;
   INTEGER1 DEF__SINDR_RETT;
   INTEGER1 DEF__FIS_N_CADEIR;
   INTEGER1 DEF__FIS_CADEIR;
   INTEGER2 DEF__N_POSSUI;
	 
END;
file := DATASET('~thor::microdados_2018.csv',
				 CSVrecord,
				 CSV(HEADING(1),
					 SEPARATOR(['|']),
					 TERMINATOR(['\n','\r\n','\n\r'])));

MICRODADOS_COUNT :=  TABLE(file,{INTEGER3  s := COUNT(GROUP)});
					 


Q1_DISTRICTS :=  TABLE(file,{NOME_DISTRITO,CD_UNIDADE_EDUCACAO},NOME_DISTRITO,CD_UNIDADE_EDUCACAO);
Q1_DISTRICTS_GROUP :=  TABLE(Q1_DISTRICTS,{NOME_DISTRITO,INTEGER2  s := COUNT(NOME_DISTRITO)});
Q1_DISTRICTS_GROUP_COUNT :=  TABLE(Q1_DISTRICTS_GROUP,{NOME_DISTRITO,INTEGER2  contador := COUNT(GROUP)},NOME_DISTRITO,s);

MaxVal := MAX(Q1_DISTRICTS_GROUP_COUNT,Q1_DISTRICTS_GROUP_COUNT.contador);
MinVal := MIN(Q1_DISTRICTS_GROUP_COUNT,Q1_DISTRICTS_GROUP_COUNT.contador);

Q1_DISTRICTS_WITH_LEAST_SCHOOLS  := Q1_DISTRICTS_GROUP_COUNT(Q1_DISTRICTS_GROUP_COUNT.contador = MinVal);
Q1_DISTRICTS_WITH_MOST_SCHOOLS   := Q1_DISTRICTS_GROUP_COUNT(Q1_DISTRICTS_GROUP_COUNT.contador = MaxVal);

Q2_BORN_OTHER_STATES :=  file(DESC_UF_NASC != 'SP');
Q2_BORN_OTHER_STATES_ORDER :=  TABLE(Q2_BORN_OTHER_STATES,{DESC_UF_NASC,INTEGER3  s := COUNT(DESC_UF_NASC)});
Q2_BORN_OTHER_STATES_COUNT :=  TABLE(Q2_BORN_OTHER_STATES_ORDER,{INTEGER3  contador := COUNT(GROUP)},s);

Q3_SPECIAL_NEEDS_FILTER :=  file(DEF__N_POSSUI != 1);
Q3_SPECIAL_NEEDS_COUNT :=  TABLE(Q3_SPECIAL_NEEDS_FILTER,{INTEGER3  contador := COUNT(GROUP)});

Q4_SPECIAL_NEEDS_PERCENT :=  REALFORMAT(((Q3_SPECIAL_NEEDS_COUNT[1].contador /  MICRODADOS_COUNT[1].contador ) *100),12,2); 


OUTPUT(Q1_DISTRICTS_WITH_LEAST_SCHOOLS);
OUTPUT(Q1_DISTRICTS_WITH_MOST_SCHOOLS);
OUTPUT(Q2_BORN_OTHER_STATES_COUNT);
OUTPUT(Q3_SPECIAL_NEEDS_COUNT);
OUTPUT(Q4_SPECIAL_NEEDS_PERCENT);